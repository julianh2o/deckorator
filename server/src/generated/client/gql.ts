/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation delete_Deck($where: Deck_bool_exp!) {\n  delete_Deck(where: $where) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}": types.Delete_DeckDocument,
    "mutation delete_DeckCard($where: DeckCard_bool_exp!) {\n  delete_DeckCard(where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}": types.Delete_DeckCardDocument,
    "mutation delete_DeckCard_by_pk($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $id: Int!) {\n  delete_DeckCard_by_pk(id: $id) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}": types.Delete_DeckCard_By_PkDocument,
    "mutation delete_DeckTemplate($where: DeckTemplate_bool_exp!) {\n  delete_DeckTemplate(where: $where) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}": types.Delete_DeckTemplateDocument,
    "mutation delete_DeckTemplateCard($where: DeckTemplateCard_bool_exp!) {\n  delete_DeckTemplateCard(where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}": types.Delete_DeckTemplateCardDocument,
    "mutation delete_DeckTemplateCard_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  delete_DeckTemplateCard_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}": types.Delete_DeckTemplateCard_By_PkDocument,
    "mutation delete_DeckTemplate_by_pk($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $id: Int!) {\n  delete_DeckTemplate_by_pk(id: $id) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}": types.Delete_DeckTemplate_By_PkDocument,
    "mutation delete_Deck_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  delete_Deck_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}": types.Delete_Deck_By_PkDocument,
    "mutation delete_GeneratedImage($where: GeneratedImage_bool_exp!) {\n  delete_GeneratedImage(where: $where) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}": types.Delete_GeneratedImageDocument,
    "mutation delete_GeneratedImage_by_pk($id: Int!) {\n  delete_GeneratedImage_by_pk(id: $id) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}": types.Delete_GeneratedImage_By_PkDocument,
    "mutation delete_Generation($where: Generation_bool_exp!) {\n  delete_Generation(where: $where) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}": types.Delete_GenerationDocument,
    "mutation delete_Generation_by_pk($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $id: Int!) {\n  delete_Generation_by_pk(id: $id) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}": types.Delete_Generation_By_PkDocument,
    "mutation insert_Deck($objects: [Deck_insert_input!]!, $on_conflict: Deck_on_conflict) {\n  insert_Deck(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}": types.Insert_DeckDocument,
    "mutation insert_DeckCard($objects: [DeckCard_insert_input!]!, $on_conflict: DeckCard_on_conflict) {\n  insert_DeckCard(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}": types.Insert_DeckCardDocument,
    "mutation insert_DeckCard_one($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $object: DeckCard_insert_input!, $on_conflict: DeckCard_on_conflict) {\n  insert_DeckCard_one(object: $object, on_conflict: $on_conflict) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}": types.Insert_DeckCard_OneDocument,
    "mutation insert_DeckTemplate($objects: [DeckTemplate_insert_input!]!, $on_conflict: DeckTemplate_on_conflict) {\n  insert_DeckTemplate(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}": types.Insert_DeckTemplateDocument,
    "mutation insert_DeckTemplateCard($objects: [DeckTemplateCard_insert_input!]!, $on_conflict: DeckTemplateCard_on_conflict) {\n  insert_DeckTemplateCard(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}": types.Insert_DeckTemplateCardDocument,
    "mutation insert_DeckTemplateCard_one($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $object: DeckTemplateCard_insert_input!, $on_conflict: DeckTemplateCard_on_conflict) {\n  insert_DeckTemplateCard_one(object: $object, on_conflict: $on_conflict) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}": types.Insert_DeckTemplateCard_OneDocument,
    "mutation insert_DeckTemplate_one($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $object: DeckTemplate_insert_input!, $on_conflict: DeckTemplate_on_conflict) {\n  insert_DeckTemplate_one(object: $object, on_conflict: $on_conflict) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}": types.Insert_DeckTemplate_OneDocument,
    "mutation insert_Deck_one($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $object: Deck_insert_input!, $on_conflict: Deck_on_conflict) {\n  insert_Deck_one(object: $object, on_conflict: $on_conflict) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}": types.Insert_Deck_OneDocument,
    "mutation insert_GeneratedImage($objects: [GeneratedImage_insert_input!]!, $on_conflict: GeneratedImage_on_conflict) {\n  insert_GeneratedImage(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}": types.Insert_GeneratedImageDocument,
    "mutation insert_GeneratedImage_one($object: GeneratedImage_insert_input!, $on_conflict: GeneratedImage_on_conflict) {\n  insert_GeneratedImage_one(object: $object, on_conflict: $on_conflict) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}": types.Insert_GeneratedImage_OneDocument,
    "mutation insert_Generation($objects: [Generation_insert_input!]!, $on_conflict: Generation_on_conflict) {\n  insert_Generation(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}": types.Insert_GenerationDocument,
    "mutation insert_Generation_one($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $object: Generation_insert_input!, $on_conflict: Generation_on_conflict) {\n  insert_Generation_one(object: $object, on_conflict: $on_conflict) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}": types.Insert_Generation_OneDocument,
    "mutation update_Deck($_inc: Deck_inc_input, $_set: Deck_set_input, $where: Deck_bool_exp!) {\n  update_Deck(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}": types.Update_DeckDocument,
    "mutation update_DeckCard($_inc: DeckCard_inc_input, $_set: DeckCard_set_input, $where: DeckCard_bool_exp!) {\n  update_DeckCard(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}": types.Update_DeckCardDocument,
    "mutation update_DeckCard_by_pk($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $_inc: DeckCard_inc_input, $_set: DeckCard_set_input, $pk_columns: DeckCard_pk_columns_input!) {\n  update_DeckCard_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}": types.Update_DeckCard_By_PkDocument,
    "mutation update_DeckCard_many($updates: [DeckCard_updates!]!) {\n  update_DeckCard_many(updates: $updates) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}": types.Update_DeckCard_ManyDocument,
    "mutation update_DeckTemplate($_inc: DeckTemplate_inc_input, $_set: DeckTemplate_set_input, $where: DeckTemplate_bool_exp!) {\n  update_DeckTemplate(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}": types.Update_DeckTemplateDocument,
    "mutation update_DeckTemplateCard($_inc: DeckTemplateCard_inc_input, $_set: DeckTemplateCard_set_input, $where: DeckTemplateCard_bool_exp!) {\n  update_DeckTemplateCard(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}": types.Update_DeckTemplateCardDocument,
    "mutation update_DeckTemplateCard_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $_inc: DeckTemplateCard_inc_input, $_set: DeckTemplateCard_set_input, $pk_columns: DeckTemplateCard_pk_columns_input!) {\n  update_DeckTemplateCard_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}": types.Update_DeckTemplateCard_By_PkDocument,
    "mutation update_DeckTemplateCard_many($updates: [DeckTemplateCard_updates!]!) {\n  update_DeckTemplateCard_many(updates: $updates) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}": types.Update_DeckTemplateCard_ManyDocument,
    "mutation update_DeckTemplate_by_pk($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $_inc: DeckTemplate_inc_input, $_set: DeckTemplate_set_input, $pk_columns: DeckTemplate_pk_columns_input!) {\n  update_DeckTemplate_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}": types.Update_DeckTemplate_By_PkDocument,
    "mutation update_DeckTemplate_many($updates: [DeckTemplate_updates!]!) {\n  update_DeckTemplate_many(updates: $updates) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}": types.Update_DeckTemplate_ManyDocument,
    "mutation update_Deck_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $_inc: Deck_inc_input, $_set: Deck_set_input, $pk_columns: Deck_pk_columns_input!) {\n  update_Deck_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}": types.Update_Deck_By_PkDocument,
    "mutation update_Deck_many($updates: [Deck_updates!]!) {\n  update_Deck_many(updates: $updates) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}": types.Update_Deck_ManyDocument,
    "mutation update_GeneratedImage($_inc: GeneratedImage_inc_input, $_set: GeneratedImage_set_input, $where: GeneratedImage_bool_exp!) {\n  update_GeneratedImage(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}": types.Update_GeneratedImageDocument,
    "mutation update_GeneratedImage_by_pk($_inc: GeneratedImage_inc_input, $_set: GeneratedImage_set_input, $pk_columns: GeneratedImage_pk_columns_input!) {\n  update_GeneratedImage_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}": types.Update_GeneratedImage_By_PkDocument,
    "mutation update_GeneratedImage_many($updates: [GeneratedImage_updates!]!) {\n  update_GeneratedImage_many(updates: $updates) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}": types.Update_GeneratedImage_ManyDocument,
    "mutation update_Generation($_inc: Generation_inc_input, $_set: Generation_set_input, $where: Generation_bool_exp!) {\n  update_Generation(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}": types.Update_GenerationDocument,
    "mutation update_Generation_by_pk($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $_inc: Generation_inc_input, $_set: Generation_set_input, $pk_columns: Generation_pk_columns_input!) {\n  update_Generation_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}": types.Update_Generation_By_PkDocument,
    "mutation update_Generation_many($updates: [Generation_updates!]!) {\n  update_Generation_many(updates: $updates) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}": types.Update_Generation_ManyDocument,
    "query Deck($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp) {\n  Deck(\n    distinct_on: $distinct_on1\n    limit: $limit1\n    offset: $offset1\n    order_by: $order_by1\n    where: $where1\n  ) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}": types.DeckDocument,
    "query DeckCard($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $distinct_on1: [DeckCard_select_column!], $limit1: Int, $offset1: Int, $order_by1: [DeckCard_order_by!], $where1: DeckCard_bool_exp) {\n  DeckCard(\n    distinct_on: $distinct_on1\n    limit: $limit1\n    offset: $offset1\n    order_by: $order_by1\n    where: $where1\n  ) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}": types.DeckCardDocument,
    "query DeckCard_aggregate($columns: [DeckCard_select_column!], $distinct: Boolean, $distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp) {\n  DeckCard_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}": types.DeckCard_AggregateDocument,
    "query DeckCard_by_pk($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $id: Int!) {\n  DeckCard_by_pk(id: $id) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}": types.DeckCard_By_PkDocument,
    "query DeckTemplate($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $distinct_on2: [DeckTemplate_select_column!], $limit2: Int, $offset2: Int, $order_by2: [DeckTemplate_order_by!], $where2: DeckTemplate_bool_exp) {\n  DeckTemplate(\n    distinct_on: $distinct_on2\n    limit: $limit2\n    offset: $offset2\n    order_by: $order_by2\n    where: $where2\n  ) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}": types.DeckTemplateDocument,
    "query DeckTemplateCard($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $distinct_on1: [DeckTemplateCard_select_column!], $limit1: Int, $offset1: Int, $order_by1: [DeckTemplateCard_order_by!], $where1: DeckTemplateCard_bool_exp) {\n  DeckTemplateCard(\n    distinct_on: $distinct_on1\n    limit: $limit1\n    offset: $offset1\n    order_by: $order_by1\n    where: $where1\n  ) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}": types.DeckTemplateCardDocument,
    "query DeckTemplateCard_aggregate($columns: [DeckTemplateCard_select_column!], $distinct: Boolean, $distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp) {\n  DeckTemplateCard_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}": types.DeckTemplateCard_AggregateDocument,
    "query DeckTemplateCard_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  DeckTemplateCard_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}": types.DeckTemplateCard_By_PkDocument,
    "query DeckTemplate_aggregate($columns: [DeckTemplate_select_column!], $distinct: Boolean, $distinct_on: [DeckTemplate_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplate_order_by!], $where: DeckTemplate_bool_exp) {\n  DeckTemplate_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}": types.DeckTemplate_AggregateDocument,
    "query DeckTemplate_by_pk($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $id: Int!) {\n  DeckTemplate_by_pk(id: $id) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}": types.DeckTemplate_By_PkDocument,
    "query Deck_aggregate($columns: [Deck_select_column!], $distinct: Boolean, $distinct_on: [Deck_select_column!], $limit: Int, $offset: Int, $order_by: [Deck_order_by!], $where: Deck_bool_exp) {\n  Deck_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}": types.Deck_AggregateDocument,
    "query Deck_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  Deck_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}": types.Deck_By_PkDocument,
    "query GeneratedImage($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp) {\n  GeneratedImage(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}": types.GeneratedImageDocument,
    "query GeneratedImage_aggregate($columns: [GeneratedImage_select_column!], $distinct: Boolean, $distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp) {\n  GeneratedImage_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}": types.GeneratedImage_AggregateDocument,
    "query GeneratedImage_by_pk($id: Int!) {\n  GeneratedImage_by_pk(id: $id) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}": types.GeneratedImage_By_PkDocument,
    "query Generation($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $distinct_on2: [Generation_select_column!], $limit2: Int, $offset2: Int, $order_by2: [Generation_order_by!], $where2: Generation_bool_exp) {\n  Generation(\n    distinct_on: $distinct_on2\n    limit: $limit2\n    offset: $offset2\n    order_by: $order_by2\n    where: $where2\n  ) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}": types.GenerationDocument,
    "query Generation_aggregate($columns: [Generation_select_column!], $distinct: Boolean, $distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp) {\n  Generation_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}": types.Generation_AggregateDocument,
    "query Generation_by_pk($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $id: Int!) {\n  Generation_by_pk(id: $id) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}": types.Generation_By_PkDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_Deck($where: Deck_bool_exp!) {\n  delete_Deck(where: $where) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation delete_Deck($where: Deck_bool_exp!) {\n  delete_Deck(where: $where) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_DeckCard($where: DeckCard_bool_exp!) {\n  delete_DeckCard(where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation delete_DeckCard($where: DeckCard_bool_exp!) {\n  delete_DeckCard(where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_DeckCard_by_pk($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $id: Int!) {\n  delete_DeckCard_by_pk(id: $id) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation delete_DeckCard_by_pk($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $id: Int!) {\n  delete_DeckCard_by_pk(id: $id) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_DeckTemplate($where: DeckTemplate_bool_exp!) {\n  delete_DeckTemplate(where: $where) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation delete_DeckTemplate($where: DeckTemplate_bool_exp!) {\n  delete_DeckTemplate(where: $where) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_DeckTemplateCard($where: DeckTemplateCard_bool_exp!) {\n  delete_DeckTemplateCard(where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation delete_DeckTemplateCard($where: DeckTemplateCard_bool_exp!) {\n  delete_DeckTemplateCard(where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_DeckTemplateCard_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  delete_DeckTemplateCard_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation delete_DeckTemplateCard_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  delete_DeckTemplateCard_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_DeckTemplate_by_pk($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $id: Int!) {\n  delete_DeckTemplate_by_pk(id: $id) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation delete_DeckTemplate_by_pk($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $id: Int!) {\n  delete_DeckTemplate_by_pk(id: $id) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_Deck_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  delete_Deck_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation delete_Deck_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  delete_Deck_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_GeneratedImage($where: GeneratedImage_bool_exp!) {\n  delete_GeneratedImage(where: $where) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation delete_GeneratedImage($where: GeneratedImage_bool_exp!) {\n  delete_GeneratedImage(where: $where) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_GeneratedImage_by_pk($id: Int!) {\n  delete_GeneratedImage_by_pk(id: $id) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}"): (typeof documents)["mutation delete_GeneratedImage_by_pk($id: Int!) {\n  delete_GeneratedImage_by_pk(id: $id) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_Generation($where: Generation_bool_exp!) {\n  delete_Generation(where: $where) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}"): (typeof documents)["mutation delete_Generation($where: Generation_bool_exp!) {\n  delete_Generation(where: $where) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation delete_Generation_by_pk($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $id: Int!) {\n  delete_Generation_by_pk(id: $id) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}"): (typeof documents)["mutation delete_Generation_by_pk($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $id: Int!) {\n  delete_Generation_by_pk(id: $id) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_Deck($objects: [Deck_insert_input!]!, $on_conflict: Deck_on_conflict) {\n  insert_Deck(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation insert_Deck($objects: [Deck_insert_input!]!, $on_conflict: Deck_on_conflict) {\n  insert_Deck(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_DeckCard($objects: [DeckCard_insert_input!]!, $on_conflict: DeckCard_on_conflict) {\n  insert_DeckCard(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation insert_DeckCard($objects: [DeckCard_insert_input!]!, $on_conflict: DeckCard_on_conflict) {\n  insert_DeckCard(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_DeckCard_one($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $object: DeckCard_insert_input!, $on_conflict: DeckCard_on_conflict) {\n  insert_DeckCard_one(object: $object, on_conflict: $on_conflict) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation insert_DeckCard_one($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $object: DeckCard_insert_input!, $on_conflict: DeckCard_on_conflict) {\n  insert_DeckCard_one(object: $object, on_conflict: $on_conflict) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_DeckTemplate($objects: [DeckTemplate_insert_input!]!, $on_conflict: DeckTemplate_on_conflict) {\n  insert_DeckTemplate(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation insert_DeckTemplate($objects: [DeckTemplate_insert_input!]!, $on_conflict: DeckTemplate_on_conflict) {\n  insert_DeckTemplate(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_DeckTemplateCard($objects: [DeckTemplateCard_insert_input!]!, $on_conflict: DeckTemplateCard_on_conflict) {\n  insert_DeckTemplateCard(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation insert_DeckTemplateCard($objects: [DeckTemplateCard_insert_input!]!, $on_conflict: DeckTemplateCard_on_conflict) {\n  insert_DeckTemplateCard(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_DeckTemplateCard_one($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $object: DeckTemplateCard_insert_input!, $on_conflict: DeckTemplateCard_on_conflict) {\n  insert_DeckTemplateCard_one(object: $object, on_conflict: $on_conflict) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation insert_DeckTemplateCard_one($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $object: DeckTemplateCard_insert_input!, $on_conflict: DeckTemplateCard_on_conflict) {\n  insert_DeckTemplateCard_one(object: $object, on_conflict: $on_conflict) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_DeckTemplate_one($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $object: DeckTemplate_insert_input!, $on_conflict: DeckTemplate_on_conflict) {\n  insert_DeckTemplate_one(object: $object, on_conflict: $on_conflict) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation insert_DeckTemplate_one($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $object: DeckTemplate_insert_input!, $on_conflict: DeckTemplate_on_conflict) {\n  insert_DeckTemplate_one(object: $object, on_conflict: $on_conflict) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_Deck_one($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $object: Deck_insert_input!, $on_conflict: Deck_on_conflict) {\n  insert_Deck_one(object: $object, on_conflict: $on_conflict) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation insert_Deck_one($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $object: Deck_insert_input!, $on_conflict: Deck_on_conflict) {\n  insert_Deck_one(object: $object, on_conflict: $on_conflict) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_GeneratedImage($objects: [GeneratedImage_insert_input!]!, $on_conflict: GeneratedImage_on_conflict) {\n  insert_GeneratedImage(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation insert_GeneratedImage($objects: [GeneratedImage_insert_input!]!, $on_conflict: GeneratedImage_on_conflict) {\n  insert_GeneratedImage(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_GeneratedImage_one($object: GeneratedImage_insert_input!, $on_conflict: GeneratedImage_on_conflict) {\n  insert_GeneratedImage_one(object: $object, on_conflict: $on_conflict) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}"): (typeof documents)["mutation insert_GeneratedImage_one($object: GeneratedImage_insert_input!, $on_conflict: GeneratedImage_on_conflict) {\n  insert_GeneratedImage_one(object: $object, on_conflict: $on_conflict) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_Generation($objects: [Generation_insert_input!]!, $on_conflict: Generation_on_conflict) {\n  insert_Generation(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}"): (typeof documents)["mutation insert_Generation($objects: [Generation_insert_input!]!, $on_conflict: Generation_on_conflict) {\n  insert_Generation(objects: $objects, on_conflict: $on_conflict) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation insert_Generation_one($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $object: Generation_insert_input!, $on_conflict: Generation_on_conflict) {\n  insert_Generation_one(object: $object, on_conflict: $on_conflict) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}"): (typeof documents)["mutation insert_Generation_one($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $object: Generation_insert_input!, $on_conflict: Generation_on_conflict) {\n  insert_Generation_one(object: $object, on_conflict: $on_conflict) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_Deck($_inc: Deck_inc_input, $_set: Deck_set_input, $where: Deck_bool_exp!) {\n  update_Deck(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation update_Deck($_inc: Deck_inc_input, $_set: Deck_set_input, $where: Deck_bool_exp!) {\n  update_Deck(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_DeckCard($_inc: DeckCard_inc_input, $_set: DeckCard_set_input, $where: DeckCard_bool_exp!) {\n  update_DeckCard(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation update_DeckCard($_inc: DeckCard_inc_input, $_set: DeckCard_set_input, $where: DeckCard_bool_exp!) {\n  update_DeckCard(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_DeckCard_by_pk($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $_inc: DeckCard_inc_input, $_set: DeckCard_set_input, $pk_columns: DeckCard_pk_columns_input!) {\n  update_DeckCard_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation update_DeckCard_by_pk($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $_inc: DeckCard_inc_input, $_set: DeckCard_set_input, $pk_columns: DeckCard_pk_columns_input!) {\n  update_DeckCard_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_DeckCard_many($updates: [DeckCard_updates!]!) {\n  update_DeckCard_many(updates: $updates) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation update_DeckCard_many($updates: [DeckCard_updates!]!) {\n  update_DeckCard_many(updates: $updates) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_DeckTemplate($_inc: DeckTemplate_inc_input, $_set: DeckTemplate_set_input, $where: DeckTemplate_bool_exp!) {\n  update_DeckTemplate(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation update_DeckTemplate($_inc: DeckTemplate_inc_input, $_set: DeckTemplate_set_input, $where: DeckTemplate_bool_exp!) {\n  update_DeckTemplate(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_DeckTemplateCard($_inc: DeckTemplateCard_inc_input, $_set: DeckTemplateCard_set_input, $where: DeckTemplateCard_bool_exp!) {\n  update_DeckTemplateCard(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation update_DeckTemplateCard($_inc: DeckTemplateCard_inc_input, $_set: DeckTemplateCard_set_input, $where: DeckTemplateCard_bool_exp!) {\n  update_DeckTemplateCard(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_DeckTemplateCard_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $_inc: DeckTemplateCard_inc_input, $_set: DeckTemplateCard_set_input, $pk_columns: DeckTemplateCard_pk_columns_input!) {\n  update_DeckTemplateCard_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation update_DeckTemplateCard_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $_inc: DeckTemplateCard_inc_input, $_set: DeckTemplateCard_set_input, $pk_columns: DeckTemplateCard_pk_columns_input!) {\n  update_DeckTemplateCard_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_DeckTemplateCard_many($updates: [DeckTemplateCard_updates!]!) {\n  update_DeckTemplateCard_many(updates: $updates) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation update_DeckTemplateCard_many($updates: [DeckTemplateCard_updates!]!) {\n  update_DeckTemplateCard_many(updates: $updates) {\n    affected_rows\n    returning {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_DeckTemplate_by_pk($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $_inc: DeckTemplate_inc_input, $_set: DeckTemplate_set_input, $pk_columns: DeckTemplate_pk_columns_input!) {\n  update_DeckTemplate_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation update_DeckTemplate_by_pk($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $_inc: DeckTemplate_inc_input, $_set: DeckTemplate_set_input, $pk_columns: DeckTemplate_pk_columns_input!) {\n  update_DeckTemplate_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_DeckTemplate_many($updates: [DeckTemplate_updates!]!) {\n  update_DeckTemplate_many(updates: $updates) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation update_DeckTemplate_many($updates: [DeckTemplate_updates!]!) {\n  update_DeckTemplate_many(updates: $updates) {\n    affected_rows\n    returning {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_Deck_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $_inc: Deck_inc_input, $_set: Deck_set_input, $pk_columns: Deck_pk_columns_input!) {\n  update_Deck_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}"): (typeof documents)["mutation update_Deck_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $_inc: Deck_inc_input, $_set: Deck_set_input, $pk_columns: Deck_pk_columns_input!) {\n  update_Deck_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_Deck_many($updates: [Deck_updates!]!) {\n  update_Deck_many(updates: $updates) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation update_Deck_many($updates: [Deck_updates!]!) {\n  update_Deck_many(updates: $updates) {\n    affected_rows\n    returning {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_GeneratedImage($_inc: GeneratedImage_inc_input, $_set: GeneratedImage_set_input, $where: GeneratedImage_bool_exp!) {\n  update_GeneratedImage(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation update_GeneratedImage($_inc: GeneratedImage_inc_input, $_set: GeneratedImage_set_input, $where: GeneratedImage_bool_exp!) {\n  update_GeneratedImage(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_GeneratedImage_by_pk($_inc: GeneratedImage_inc_input, $_set: GeneratedImage_set_input, $pk_columns: GeneratedImage_pk_columns_input!) {\n  update_GeneratedImage_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}"): (typeof documents)["mutation update_GeneratedImage_by_pk($_inc: GeneratedImage_inc_input, $_set: GeneratedImage_set_input, $pk_columns: GeneratedImage_pk_columns_input!) {\n  update_GeneratedImage_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_GeneratedImage_many($updates: [GeneratedImage_updates!]!) {\n  update_GeneratedImage_many(updates: $updates) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}"): (typeof documents)["mutation update_GeneratedImage_many($updates: [GeneratedImage_updates!]!) {\n  update_GeneratedImage_many(updates: $updates) {\n    affected_rows\n    returning {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_Generation($_inc: Generation_inc_input, $_set: Generation_set_input, $where: Generation_bool_exp!) {\n  update_Generation(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}"): (typeof documents)["mutation update_Generation($_inc: Generation_inc_input, $_set: Generation_set_input, $where: Generation_bool_exp!) {\n  update_Generation(_inc: $_inc, _set: $_set, where: $where) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_Generation_by_pk($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $_inc: Generation_inc_input, $_set: Generation_set_input, $pk_columns: Generation_pk_columns_input!) {\n  update_Generation_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}"): (typeof documents)["mutation update_Generation_by_pk($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $_inc: Generation_inc_input, $_set: Generation_set_input, $pk_columns: Generation_pk_columns_input!) {\n  update_Generation_by_pk(_inc: $_inc, _set: $_set, pk_columns: $pk_columns) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation update_Generation_many($updates: [Generation_updates!]!) {\n  update_Generation_many(updates: $updates) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}"): (typeof documents)["mutation update_Generation_many($updates: [Generation_updates!]!) {\n  update_Generation_many(updates: $updates) {\n    affected_rows\n    returning {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Deck($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp) {\n  Deck(\n    distinct_on: $distinct_on1\n    limit: $limit1\n    offset: $offset1\n    order_by: $order_by1\n    where: $where1\n  ) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}"): (typeof documents)["query Deck($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp) {\n  Deck(\n    distinct_on: $distinct_on1\n    limit: $limit1\n    offset: $offset1\n    order_by: $order_by1\n    where: $where1\n  ) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DeckCard($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $distinct_on1: [DeckCard_select_column!], $limit1: Int, $offset1: Int, $order_by1: [DeckCard_order_by!], $where1: DeckCard_bool_exp) {\n  DeckCard(\n    distinct_on: $distinct_on1\n    limit: $limit1\n    offset: $offset1\n    order_by: $order_by1\n    where: $where1\n  ) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}"): (typeof documents)["query DeckCard($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $distinct_on1: [DeckCard_select_column!], $limit1: Int, $offset1: Int, $order_by1: [DeckCard_order_by!], $where1: DeckCard_bool_exp) {\n  DeckCard(\n    distinct_on: $distinct_on1\n    limit: $limit1\n    offset: $offset1\n    order_by: $order_by1\n    where: $where1\n  ) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DeckCard_aggregate($columns: [DeckCard_select_column!], $distinct: Boolean, $distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp) {\n  DeckCard_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["query DeckCard_aggregate($columns: [DeckCard_select_column!], $distinct: Boolean, $distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp) {\n  DeckCard_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DeckCard_by_pk($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $id: Int!) {\n  DeckCard_by_pk(id: $id) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}"): (typeof documents)["query DeckCard_by_pk($distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp, $id: Int!) {\n  DeckCard_by_pk(id: $id) {\n    Deck {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    DeckTemplateCard {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Generations(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    config\n    created_at\n    deckTemplateCard_id\n    deck_id\n    id\n    index\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DeckTemplate($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $distinct_on2: [DeckTemplate_select_column!], $limit2: Int, $offset2: Int, $order_by2: [DeckTemplate_order_by!], $where2: DeckTemplate_bool_exp) {\n  DeckTemplate(\n    distinct_on: $distinct_on2\n    limit: $limit2\n    offset: $offset2\n    order_by: $order_by2\n    where: $where2\n  ) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}"): (typeof documents)["query DeckTemplate($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $distinct_on2: [DeckTemplate_select_column!], $limit2: Int, $offset2: Int, $order_by2: [DeckTemplate_order_by!], $where2: DeckTemplate_bool_exp) {\n  DeckTemplate(\n    distinct_on: $distinct_on2\n    limit: $limit2\n    offset: $offset2\n    order_by: $order_by2\n    where: $where2\n  ) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DeckTemplateCard($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $distinct_on1: [DeckTemplateCard_select_column!], $limit1: Int, $offset1: Int, $order_by1: [DeckTemplateCard_order_by!], $where1: DeckTemplateCard_bool_exp) {\n  DeckTemplateCard(\n    distinct_on: $distinct_on1\n    limit: $limit1\n    offset: $offset1\n    order_by: $order_by1\n    where: $where1\n  ) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}"): (typeof documents)["query DeckTemplateCard($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $distinct_on1: [DeckTemplateCard_select_column!], $limit1: Int, $offset1: Int, $order_by1: [DeckTemplateCard_order_by!], $where1: DeckTemplateCard_bool_exp) {\n  DeckTemplateCard(\n    distinct_on: $distinct_on1\n    limit: $limit1\n    offset: $offset1\n    order_by: $order_by1\n    where: $where1\n  ) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DeckTemplateCard_aggregate($columns: [DeckTemplateCard_select_column!], $distinct: Boolean, $distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp) {\n  DeckTemplateCard_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["query DeckTemplateCard_aggregate($columns: [DeckTemplateCard_select_column!], $distinct: Boolean, $distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp) {\n  DeckTemplateCard_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DeckTemplateCard_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  DeckTemplateCard_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}"): (typeof documents)["query DeckTemplateCard_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  DeckTemplateCard_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    config\n    created_at\n    deckTemplate_id\n    id\n    index\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DeckTemplate_aggregate($columns: [DeckTemplate_select_column!], $distinct: Boolean, $distinct_on: [DeckTemplate_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplate_order_by!], $where: DeckTemplate_bool_exp) {\n  DeckTemplate_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["query DeckTemplate_aggregate($columns: [DeckTemplate_select_column!], $distinct: Boolean, $distinct_on: [DeckTemplate_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplate_order_by!], $where: DeckTemplate_bool_exp) {\n  DeckTemplate_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      created_at\n      id\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DeckTemplate_by_pk($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $id: Int!) {\n  DeckTemplate_by_pk(id: $id) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}"): (typeof documents)["query DeckTemplate_by_pk($distinct_on: [DeckTemplateCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckTemplateCard_order_by!], $where: DeckTemplateCard_bool_exp, $distinct_on1: [Deck_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Deck_order_by!], $where1: Deck_bool_exp, $id: Int!) {\n  DeckTemplate_by_pk(id: $id) {\n    DeckTemplateCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplate_id\n      id\n      index\n      name\n      updated_at\n    }\n    Decks(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n    created_at\n    id\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Deck_aggregate($columns: [Deck_select_column!], $distinct: Boolean, $distinct_on: [Deck_select_column!], $limit: Int, $offset: Int, $order_by: [Deck_order_by!], $where: Deck_bool_exp) {\n  Deck_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}"): (typeof documents)["query Deck_aggregate($columns: [Deck_select_column!], $distinct: Boolean, $distinct_on: [Deck_select_column!], $limit: Int, $offset: Int, $order_by: [Deck_order_by!], $where: Deck_bool_exp) {\n  Deck_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      created_at\n      deckTemplate_id\n      id\n      name\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Deck_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  Deck_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}"): (typeof documents)["query Deck_by_pk($distinct_on: [DeckCard_select_column!], $limit: Int, $offset: Int, $order_by: [DeckCard_order_by!], $where: DeckCard_bool_exp, $id: Int!) {\n  Deck_by_pk(id: $id) {\n    DeckCards(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    DeckTemplate {\n      created_at\n      id\n      name\n      updated_at\n    }\n    created_at\n    deckTemplate_id\n    id\n    name\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GeneratedImage($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp) {\n  GeneratedImage(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}"): (typeof documents)["query GeneratedImage($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp) {\n  GeneratedImage(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GeneratedImage_aggregate($columns: [GeneratedImage_select_column!], $distinct: Boolean, $distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp) {\n  GeneratedImage_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}"): (typeof documents)["query GeneratedImage_aggregate($columns: [GeneratedImage_select_column!], $distinct: Boolean, $distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp) {\n  GeneratedImage_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GeneratedImage_by_pk($id: Int!) {\n  GeneratedImage_by_pk(id: $id) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}"): (typeof documents)["query GeneratedImage_by_pk($id: Int!) {\n  GeneratedImage_by_pk(id: $id) {\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    created_at\n    generation_id\n    id\n    image\n    type\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Generation($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $distinct_on2: [Generation_select_column!], $limit2: Int, $offset2: Int, $order_by2: [Generation_order_by!], $where2: Generation_bool_exp) {\n  Generation(\n    distinct_on: $distinct_on2\n    limit: $limit2\n    offset: $offset2\n    order_by: $order_by2\n    where: $where2\n  ) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}"): (typeof documents)["query Generation($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $distinct_on2: [Generation_select_column!], $limit2: Int, $offset2: Int, $order_by2: [Generation_order_by!], $where2: Generation_bool_exp) {\n  Generation(\n    distinct_on: $distinct_on2\n    limit: $limit2\n    offset: $offset2\n    order_by: $order_by2\n    where: $where2\n  ) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Generation_aggregate($columns: [Generation_select_column!], $distinct: Boolean, $distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp) {\n  Generation_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}"): (typeof documents)["query Generation_aggregate($columns: [Generation_select_column!], $distinct: Boolean, $distinct_on: [Generation_select_column!], $limit: Int, $offset: Int, $order_by: [Generation_order_by!], $where: Generation_bool_exp) {\n  Generation_aggregate(\n    distinct_on: $distinct_on\n    limit: $limit\n    offset: $offset\n    order_by: $order_by\n    where: $where\n  ) {\n    aggregate {\n      count(columns: $columns, distinct: $distinct)\n    }\n    nodes {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Generation_by_pk($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $id: Int!) {\n  Generation_by_pk(id: $id) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}"): (typeof documents)["query Generation_by_pk($distinct_on: [GeneratedImage_select_column!], $limit: Int, $offset: Int, $order_by: [GeneratedImage_order_by!], $where: GeneratedImage_bool_exp, $distinct_on1: [Generation_select_column!], $limit1: Int, $offset1: Int, $order_by1: [Generation_order_by!], $where1: Generation_bool_exp, $id: Int!) {\n  Generation_by_pk(id: $id) {\n    DeckCard {\n      config\n      created_at\n      deckTemplateCard_id\n      deck_id\n      id\n      index\n      name\n      updated_at\n    }\n    GeneratedImages(\n      distinct_on: $distinct_on\n      limit: $limit\n      offset: $offset\n      order_by: $order_by\n      where: $where\n    ) {\n      created_at\n      generation_id\n      id\n      image\n      type\n      updated_at\n    }\n    Generation {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    Generations(\n      distinct_on: $distinct_on1\n      limit: $limit1\n      offset: $offset1\n      order_by: $order_by1\n      where: $where1\n    ) {\n      batch\n      card_id\n      config\n      created_at\n      derivedFrom\n      id\n      prompt\n      updated_at\n      variationText\n    }\n    batch\n    card_id\n    config\n    created_at\n    derivedFrom\n    id\n    prompt\n    updated_at\n    variationText\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;